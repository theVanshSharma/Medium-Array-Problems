Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.
LINK:- https://practice.geeksforgeeks.org/problems/kadanes-algorithm-1587115620/0?company[]=Visa&company[]=Visa&page=2&query=company[]Visapage2company[]Visa&utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=kadanes-algorithm


class Solution{
    public:
    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long long maxSubarraySum(int arr[], int n){
        
        // Your code here
        // int maxsum=0;
        // int cursum=0;
        // for(int i=0;i<n;i++){
        //     cursum=cursum+arr[i];
        //     if(cursum>maxsum){
        //         maxsum=cursum;
        //     }                                     
        //     if(cursum<0){
        //         cursum=0;
        //     }
        // }
        // return maxsum;
        
        long long curr_sum=0;
        long long sum=INT_MIN;         // by using INT_MIN we are setting min -ve value so that our maxsum remains -1 as -1 is > all -ve numbers and then we will get
                                       // our maximum sum as -1 or any greatest -ve number when array contains all -ve numbers
        for(int i=0;i<n;i++)
        {
            curr_sum+=arr[i];
            if(curr_sum>sum)                  
                sum=curr_sum;
            if(curr_sum<0)               // this algo says that if the current sum comes -ve then it will decrease the max sum so put current sum as 0
                curr_sum=0;
        }
        return sum;
    
        
    }
};
